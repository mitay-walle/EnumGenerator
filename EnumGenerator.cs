using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Sirenix.OdinInspector;
using UI.Plugins;
using UnityEditor;
using UnityEngine;

namespace CodeGeneration
{
    [Serializable]
    public struct EnumValue
    {
        [HorizontalGroup, HideLabel, ReadOnly] public string Name;
        [HorizontalGroup, HideLabel, ReadOnly] public int Value;
    }

    [CreateAssetMenu]
    public class EnumGenerator : ScriptableObject
    {
        [SerializeField, FolderPath, Required] string folder;
        [SerializeField,InlineButton(nameof(DeleteFile),"Delete")] TextAsset asset;
        [SerializeField] int TabCount = 4;
        [SerializeField, ReadOnly] string Namespace;

        [SerializeField, ListDrawerSettings(DraggableItems = false, HideAddButton = true)]
        List<EnumValue> values = new();

        [Button]
        void Add(string Name)
        {
            if (values.Exists(val => val.Name == Name))
            {
                Debug.LogError($"[ EnumGenerator ] Add | duplicate name '{Name}' not allowed");
                return;
            }
            PreEditorExtensions.UndoRecordObject(this, "add enum value");
            var max = values.Count > 0 ? values.Max(val => val.Value) : -1;
            EnumValue value = default;
            value.Name = Name;
            value.Value = max + 1;
            values.Add(value);
        }

        [Button(ButtonSizes.Gigantic)]
        void Generate()
        {
            if (!string.IsNullOrEmpty(folder))
            {
                Namespace = folder.Substring(folder.IndexOf("Scripts") + "Scripts".Length + 1).Replace('/', '.');
            }

            var lines = new List<string>();

            string tab = new(' ', TabCount);
            
            lines.Add($"// Code Generated by '{AssetDatabase.GetAssetPath(this)}'");
            lines.Add($"namespace {Namespace}");
            lines.Add("{");
            lines.Add($"{tab}public enum {name}");
            lines.Add(tab + '{');

            for (int i = 0; i < values.Count; i++)
            {
                var value = values[i];
                lines.Add($"{tab}{tab}{value.Name} = {value.Value},");
            }

            lines.Add(tab + '}');
            lines.Add("}");

            string text = string.Join('\n', lines);

            string path = $"{folder}/{name}.cs";

#if UNITY_EDITOR
            File.WriteAllText(Application.dataPath + path.Remove(0, "Assets".Length), text);
            AssetDatabase.Refresh();
            AssetDatabase.ImportAsset(path);
            asset = AssetDatabase.LoadAssetAtPath<TextAsset>(path);
#endif
        }

        void DeleteFile()
        {
            if (asset)
            {
                AssetDatabase.DeleteAsset(AssetDatabase.GetAssetPath(asset));
                AssetDatabase.Refresh();
            }
        }
    }
}
